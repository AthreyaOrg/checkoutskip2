# # # # env:
# # # #   BUILDKITE_ARTIFACT_UPLOAD_DESTINATION: 'rt://tf-trial/workspaces/jfrog-ws1/test.txt'
# # # #   BUILDKITE_ARTIFACTORY_URL: 'https://personaluse4.jfrog.io/artifactory'
# # # #   BUILDKITE_ARTIFACTORY_USER: 'athreya'
# # # #   BUILDKITE_ARTIFACTORY_PASSWORD: 'Srinivas@24'
# # # #   $$BUILDKITE_ARTIFACT_PATHS: 'https://personaluse4.jfrog.io/artifactory/tf-trial/workspaces/jfrog-ws1/'

# # # # steps:
# # # # - label: "Graceful Termination Test"
# # # #   command: |
# # # #     trap "echo 'This command indicates that we Received a SIGTERM and Ideally we should starting graceful shutdown... check the signal time from here'; sleep 90; echo 'Graceful shutdown complete.'" SIGTERM
# # # #     echo "SSatrting a process that runs for 90 seconds to check"
# # # #     sleep 90
# # # #     echo "Long-running process completed."

# # # steps:
# # # - label: "job retry vs rebuild times test :rocket:"
# # #   command: |
# # #     echo "this is a test for rebuild and retry $BUILDKITE_BUILD_ID and Job ID $BUILDKITE_JOB_ID"
# # #     sleep 120
# # #     exit 1
# # #   timeout_in_minutes: 1
# # #   key: "this"

# # # - label: "send results to slack"
# # #   command: echo "test"
# # #   # agents:
# # #   #   queue: "another_test"
# # #   priority: 0
# # #   notify:
# # #   - slack: "#slack_notification_test"
# # #   timeout_in_minutes: 1
# # #   depends_on: "this"
# # #   allow_dependency_failure: false



# # # steps:
# # # - group: ":lock_with_ink_pen: Security Audits"
# # #   key: "audits"
# # #   steps:
# # #   - label: ":brakeman: Brakeman"
# # #     command: "echo step 1 passed"
# # #   - label: ":bundleaudit: Bundle Audit"
# # #     command: "echo step 2 passed"
# # #   - label: ":yarn: Yarn Audit"
# # #     command: "echo step p3 assed"
# # #   - label: ":yarn: Outdated Check"
# # #     command: exit 1
# # #   notify:
# # #   - github_commit_status:
# # #       context: "group status check at bottom"


# # steps:
# # - group: "ðŸ“¦ Group1"
# #   key: firstbuild
# #   notify:
# #   - github_commit_status:
# #       context: "my-group-status"
# #   steps:
# #   - label: ":pipeline:Group1-Step1"
# #     command: echo "This is a success."
# #     key: step1
# #   - label: ":pipeline:Group1-step2"
# #     command: echo "hi"
# #     depends_on:
# #     - step1
# #     key: step2



# # - group: "ðŸ“¦ Group2"
# #   depends_on:
# #   - firstbuild
# #   notify:
# #   - github_commit_status:
# #       context: "my-group-status-2"
# #   steps:
# #   - label: ":pipeline:Group2-Step1"
# #     command: echo "This is a success."
# #     key: group2-step1
# #   - label: ":pipeline:Group2-step2"
# #     command: echo "works"
# #     depends_on:
# #     - group2-step1
# #     key: build2-step2





# # - if: "!build.pull_request.draft && build.pull_request.id != null"
# #   group: "ðŸ“¦ Group3"
# #   depends_on:
# #   - firstbuild
# #   notify:
# #   - github_commit_status:
# #       context: "my-group-status-2"
# #   steps:
# #   - label: ":pipeline:Group2-Step1"
# #     command: echo "This is a success."
# #     key: group3-step1
# #   - label: ":pipeline:Group2-step2"
# #     command: exit 1
# #     depends_on:
# #     - group3-step1
# #     key: build2-step2


# steps:
# - key: "firstbuild"
#   group: "ðŸ“¦ Group1"
#   steps:
#   - key: "step1"
#     label: ":pipeline:Group1-Step1"
#     command: "echo \"This is a success.\""
#   - key: "step2"
#     label: ":pipeline:Group1-step2"
#     command: exit 1
#   notify:
#   - github_commit_status:
#       context: "my-group-status"

# - group: "ðŸ“¦ Group2"
#   steps:
#   - key: "group2-step1"
#     label: ":pipeline:Group2-Step1"
#     command: "echo \"This is a success.\""
#   - key: "build2-step2"
#     label: ":pipeline:Group2-step2"
#     command: exit 1
#   notify:
#   - github_commit_status:
#       context: "my-group-status-2"
#   depends_on:
#   - "firstbuild"
# if: "!build.pull_request.draft && build.pull_request.id != null"


# steps:
# - if: "!build.pull_request.draft"
#   key: "ci"
#   group: "Continuous Integration :buildkite:"
#   steps:
#   - label: "Format Prettier :barber:"
#     notify:
#     - github_commit_status:
#         context: "Frontend E2E/format-prettier"
#     command: exit 1

#   - label: "Lint :lint-roller:"
#     notify:
#     - github_commit_status:
#         context: "Frontend E2E/lint"
#     command: echo "hi"



# - group: "Mabl PR Tests"
#   key: "mabl"
#   steps:
#   - label: "Wait for Render environment to be ready"
#     command: echo "hi"
#   - wait
#   - label: "Run mabl tests against Render preview"
#     command: echo "hi"
#   notify:
#   - github_commit_status:
#       context: "Frontend E2E/mabl-tests"
#   depends_on:
#   - "ci"
# - if: "!build.pull_request.draft && build.pull_request.id != null"

# steps:
# - label: "Merge branch 'dev' into SCALE-226-FE-Show-Manage-Libraries-Button-UI-only-for-the-allowed-roles"
#   command: echo "hi"

# - label: "This is the step from the master branch and the order of this step is - one"
#   command: echo "hi"

# - label: "This is the step from the master branch and the order of this step is - two"
#   command: echo "hi"

# - label: "env var step"
#   env:
#     CMD_ENV_NEW: ls
#   command: echo $$CMD_ENV_NEW

# steps:
# - label: "signed pipeline check"
#   commands:
#   - "grep 'checkoutskip2' README.md > /opt/homebrew/etc/buildkite-agent/hooks/my_var.txt"

# - block: ":rocket: Are we ready???"

# - wait # This will wait for the block step to be manually unblocked

# - label: "dependency step"
#   command: "echo 'This step runs after the block step is unblocked'"

# - wait # Ensures the previous command completes before moving to the final step

# - label: "final step"
#   command: "echo 'finished'"
# env:
#   # This block defines other environment variables needed at the step level
#   MY_VAR: echo "$$MY_VAR"
# signature:
#   algorithm: EdDSA
#   signed_fields:
#   - command
#   value: Ax-8fPRDBJjnVYePpSnr-Saa63FXGdc0REbcSEpqDao


# steps:
# - label: Hello World!
#   command: echo Hello World, Lets start!
#   parallelism: 3
#   agents:
#     queue: kubernetes


# steps:
# - label: "Only run on PR merge"
#   command: echo "Only step 1 is running"
#   if: build.message =~ /Triggered / || build.message =~ /Merge /


# - label: "Regular Step"
#   command: echo "regular step is running"
#   if: build.message =~ /Merge /

# ######

# steps:
# - label: "Run tests and collect analytics"
#   commands:
#   - "pip install --upgrade pip"
#   - "pip install -r requirements.txt"
#   - "pip list" # Lists installed packages
#   - "which pytest" # Finds where pytest is installed
#   - "python -m pytest" # Use python -m to ensure pytest runs correctly
#   plugins:
#   - docker#v3.8.0:
#       image: "python:3.9"
#       environment:
#       - BUILDKITE_ANALYTICS_TOKEN
#   env:
#     BUILDKITE_ANALYTICS_TOKEN: "AvjDAf5Egs317ia4bZiuDUKq"


# steps:
# - label: "Use Test Var"
#   command:
#   - "echo 'Using MY_SECRET:'"
#   - "echo $$TEST_VAR"


# - label: "Example step using AWS Secrets Manager"
#   plugins:
#   - seek-oss/aws-sm:
#       env:
#         MY_SECRET_ENV_VAR: "arn:aws:secretsmanager:us-east-1:222754863288:secret:bktoken-HNMm9x"
#   command: "echo 'Hello, world! My secret is $MY_SECRET_ENV_VAR'"

# steps:
# - label: "Example step using AWS Secrets Manager"
#   commands: 'echo \$MY_TEST'
#   plugins:
#   - seek-oss/aws-sm#v1.0.0:
#       env:
#         MY_TEST: "arn:aws:secretsmanager:us-east-1:222754863288:secret:bktoken-HNMm9x"


steps:

- label: "Print Environment Variables"
  command: "echo $BUILDKITE_S3_ENDPOINT && echo $BUILDKITE_S3_DEFAULT_REGION"

- label: "Generate and upload an artifact"
  commands:
  - echo "Hello, Buildkite using MinIO!" > artifact.txt
  artifact_paths: "artifact.txt"


